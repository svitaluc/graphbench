package eu.profinit.manta.graphbench.core.csv;

import au.com.bytecode.opencsv.CSVWriter;
import eu.profinit.manta.graphbench.core.config.ConfigProperties;
import eu.profinit.manta.graphbench.core.config.GraphDBConfiguration;
import eu.profinit.manta.graphbench.core.config.model.ConfigProperty;
import eu.profinit.manta.graphbench.core.dataset.Dataset;
import eu.profinit.manta.graphbench.core.test.ITest;
import org.apache.log4j.Logger;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

public class CSVOutput {
    private String outputPath;
    private int sizeLimit = 1000000;
    private Logger LOGGER = Logger.getLogger(CSVOutput.class);
    ConfigProperties config = ConfigProperties.getInstance();

    public CSVOutput(String path) {
        outputPath = path;
    }

    /**
     * reads version of used database from file generated by maven plugin
     * @return version of used database
     * @throws IOException
     */
    private String getDatabaseVersion() throws IOException {
        String version;
        Properties p = new Properties();
        //TODO totalne docasna uprava, ceka na predelavku
        if (config.getStringProperty(ConfigProperty.DATABASE_TYPE) == "JANUSGRAPH") {
//            InputStream inStream = new FileInputStream("/media/veracrypt54/bench/graph-db-benchmark/graphbench-janusgraph/janusghraph.properties");
//            p.load(inStream);
            version = "0.3.2";
        } else {
//            InputStream inStream = new FileInputStream("/media/veracrypt54/bench/graph-db-benchmark/graphbench-titan/titan.properties");
//            p.load(inStream);
            version = "0.4.4";
        }
        return version;
    }

    /**
     * reads lucene version from file generated by maven plugin
     * @return version of lucene index backend
     * @throws IOException
     */
    private String getLuceneVersion() throws IOException {
        String version;
        Properties p = new Properties();
        if (config.getStringProperty(ConfigProperty.DATABASE_TYPE) == "JANUSGRAPH") {
            InputStream inStream = new FileInputStream("/media/veracrypt54/bench/graph-db-benchmark/graphbench-janusgraph/janusghraph.properties");
            p.load(inStream);
            version = p.getProperty("janusgraph.lucene.version");
        } else {
            InputStream inStream = new FileInputStream("/media/veracrypt54/bench/graph-db-benchmark/graphbench-titan/titan.properties");
            p.load(inStream);
            version = p.getProperty("titan.lucene.version");
        }
        return version;
    }


    /**
     * Writes all to results from test to CSV file
     * @param test
     * @throws IOException
     */
    public void writeTestToCSV(ITest test) throws IOException {
        Map<String, Long> results = test.getRestults();
        for (Map.Entry<String, Long> result : results.entrySet()) {
            writeLineToCSV(test.getDataset(), result.getKey(), result.getValue(), test.getGraphDBConfiguration());
        }
    }

    /**
     * Writes one line with result of one test to CSV file
     * @param dataset dataset used for the test
     * @param testName name of the test
     * @param time execution time of the test
     * @param conf configuration of database used for the test
     * @throws IOException
     */
    public void writeLineToCSV(Dataset dataset, String testName, long time, GraphDBConfiguration conf) throws IOException {
        ArrayList<String> line = new ArrayList<String>();
        CSVWriter writer;

        try {
            writer = createWriter(outputPath);
        } catch (IOException e) {
            LOGGER.error("Couldn't create a writer.");
            throw new IOException(e);
        }

        line.add(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
        line.add(config.getStringProperty(ConfigProperty.DATABASE_TYPE));
        line.add(getDatabaseVersion());

        String indexBackend = conf.getIndexBackend();
        line.add(indexBackend);
        if (indexBackend.contains("lucene"))
            line.add(getLuceneVersion());
        else
            line.add("unknown");

        String backend = conf.getStorageBackend();
        if (backend.contains("embedded"))
            line.add("Embedded Cassandra");
        else
            line.add("Standalone Cassandra");

        line.add(dataset.getDatasetDir());
        line.add(config.getStringProperty(ConfigProperty.TEST_TYPE));
        line.add(testName);
        line.add(Long.toString(time));

        writer.writeNext(line.toArray(new String[line.size()]));

        writer.close();
    }

    /**
     * creates new CSVWriter with the smallest postfix possible without exceeding size limit
     * @param path path to the output file
     * @return
     * @throws IOException
     */
    private CSVWriter createWriter(String path) throws IOException {
        File outputFile;

        int postfix = 1;
        do {
            LOGGER.info(path);
            if(path.endsWith(".csv"))
                path = path.substring(0, path.length()-4);
            LOGGER.info(path);
            String pathWithPostfix = path + "_" + postfix + ".csv";
            outputFile = new File(pathWithPostfix);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            postfix++;
        } while (outputFile.length() > sizeLimit);

        FileOutputStream outputStream = new FileOutputStream(outputFile, true);
        OutputStreamWriter streamWriter = new OutputStreamWriter(outputStream);
        return new CSVWriter(new BufferedWriter(streamWriter));
    }
}
